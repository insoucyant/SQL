--************************************************************************************--
-- Two Input Files Required:
--      1 --> Models_7Levels.csv. # This file contains the month, actual price, model name, forecast price, error and absolute_percentage_error
--		2 --> MatchedTimeframes_24MonthsVariance.csv 
--				# The second file is output from R code. It contains the month for which DNA match is done. The top 5 matched time frame, the match was done on the basis of how many months of variance, the cluster to which it belongs.

-- The output table is:
--            Top25_2years
-- The only change in moving from 24 months to either of : 3 months, 6 months, 12 months is to change the number in R code and the final table name.
-- A total of two changes.

--************************************************************************************--
--SELECT version();
--************************************************************************************--
--**********************		BENCHMARK		  ************************************--
--************************************************************************************--
DROP TABLE IF EXISTS benchmark;
CREATE TABLE benchmark (
 Sno serial
 ,forecasted_year_month VARCHAR(20)
 ,actual_price real
 ,variables VARCHAR(100)
 ,forecast real
 ,error real
 ,MAPE real
)
--*************************
COPY benchmark(Sno,forecasted_year_month,actual_price, variables, forecast,error,MAPE )
FROM 'D:\Sumit\WORK\Eltsen\Data\SQL\bchmrk.csv' DELIMITER ',' CSV HEADER;
--*******************************
SELECT * FROM benchmark;
--************************************************************************************--
--************************************************************************************--
--************************************************************************************--
-- All the models with their MAPE for each time period
DROP TABLE IF EXISTS Models_7Levels;
CREATE TABLE Models_7Levels ( 
 Sno serial,
 Month VARCHAR(20), 
 Forecast_date DATE, 
 Actual_Price real, 
 Model VARCHAR(255),
 Forecast_Price real,
 Error real,
 Absolute_Percentage_Error real);
-----------------------------------------------------
COPY Models_7Levels(Sno, Month, Forecast_date, Actual_Price, Model, Forecast_Price, Error, Absolute_Percentage_Error) 
FROM 'D:\Sumit\WORK\Eltsen\Data\Models_7Levels.csv' DELIMITER ',' CSV HEADER;
SELECT * FROM Models_7levels LIMIT 10;
--**************************************************************************************
	
-- TABLE CREATION for TOP 5 models for any time	
DROP TABLE IF EXISTS Top_5;
CREATE TABLE Top_5 (
	month VARCHAR(20)
	, model VARCHAR(255)
	, absolute_percentage_error real
	, rank INT
);
-- DATA INSERTION
INSERT INTO Top_5(month, model, absolute_percentage_error, rank)
SELECT rank_filter.month, rank_filter.model, rank_filter.absolute_percentage_error, rank_filter.rank FROM (
        SELECT Models_7Levels.*, 
        rank() OVER (
            PARTITION BY month
            ORDER BY absolute_percentage_error DESC
        )
        FROM Models_7Levels
        --WHERE Models_7Levels.month = '1990-01'
    ) rank_filter WHERE RANK < 25;
	
-- CHECK whether data inserted or not
SELECT * from Top_5 LIMIT 20;
------------------------------------------------------
--**************************************************************************************
--******************************        SECOND FILE      *******************************
--**************************************************************************************
DROP TABLE IF EXISTS MatchedTimeframes;
-------------
CREATE TABLE MatchedTimeframes(	
Sno serial,
YEARMONTH VARCHAR(20)
,TF VARCHAR(10)
,MatchingTimeFrame VARCHAR(20)
,VarianceTimeline INT	);
----------------
COPY MatchedTimeframes(
Sno,YEARMONTH,TF,MatchingTimeFrame,VarianceTimeline
)
FROM 'D:\Sumit\WORK\Eltsen\Data\SQL\MatchedTimeframes4.csv' DELIMITER ',' CSV HEADER;
----------------
SELECT * from MatchedTimeframes LIMIT 10;

--*****************************************************************************************
--   			JOINING THE TWO - MatchedTimeframes & Top_5
--*****************************************************************************************
DROP TABLE IF EXISTS Top100;
CREATE TABLE Top100
AS
SELECT
  MatchedTimeframes.yearmonth
 ,MatchedTimeframes.MatchingTimeFrame
 ,MatchedTimeframes.VarianceTimeline
 ,Top_5.model
-- ,Top_5.absolute_percentage_error
FROM
 MatchedTimeframes 
LEFT JOIN Top_5 ON MatchedTimeframes.yearmonth = Top_5.month;

SELECT * FROM Top100;

--*****************************************************************************************
--   			 Does Same Model Exist in two Time Periods
--*****************************************************************************************
DROP TABLE IF EXISTS Common_Models;
CREATE TABLE Common_Models
AS
SELECT distinct t1.yearmonth, t1.MatchingTimeFrame AS MatchTF1,t2.MatchingTimeFrame AS MatchTF2, t1.model, t1.VarianceTimeline AS tab1Vartime, t2.VarianceTimeline AS tab2VarTime
FROM Top100 as t1
INNER JOIN Top100 as t2
ON t1.yearmonth = t2.yearmonth 
AND t1.model = t2.model
AND t1.VarianceTimeline = t2.VarianceTimeline
AND t1.MatchingTimeFrame != t2.MatchingTimeFrame
GROUP BY t1.yearmonth, t1.MatchingTimeFrame,t2.MatchingTimeFrame, t1.model, t1.VarianceTimeline, t2.VarianceTimeline
ORDER BY t1.yearmonth, t1.MatchingTimeFrame,t2.MatchingTimeFrame, t1.model, t1.VarianceTimeline, t2.VarianceTimeline;


SELECT * FROM Common_Models;

COPY Common_Models TO 'D:\Sumit\WORK\Eltsen\Data\SQL\Common_ModelsC.csv'
DELIMITER ',' CSV HEADER;
SELECT DISTINCT yearmonth, model FROM Common_Models ORDER BY yearmonth; 

DROP TABLE IF EXISTS Dis_Com_Models;
CREATE TABLE Dis_Com_Models
AS
SELECT DISTINCT yearmonth, model FROM Common_Models ORDER BY yearmonth; 

SELECT * FROM Dis_Com_Models;

--********************************************************************************************************
DROP TABLE IF EXISTS com_mdls_bcm;
CREATE TABLE com_mdls_bcm
AS
SELECT a.*, b.forecasted_year_month, b.actual_price, b.forecast as benchmark, b.error as bchmrk_error
, b.mape as bchmrk_mape, (b.error/b.actual_price) as bchmrk_ape
FROM 
Dis_Com_Models as a
INNER JOIN 
benchmark AS b 
ON
a.yearmonth = b.forecasted_year_month;

SELECT * FROM com_mdls_bcm;

--********************************************************************************************************
DROP TABLE IF EXISTS mdl_cmprsn;
CREATE TABLE mdl_cmprsn
AS
SELECT a.*, b.actual_price AS mdl_actual_price, b.forecast_price as mdl_frcst_prc, b.error as mdl_error
, b.absolute_percentage_error as mdl_ape , (a.bchmrk_ape - b.absolute_percentage_error) as mdl_btr
FROM 
com_mdls_bcm AS a
INNER JOIN
Models_7Levels AS b
ON
a.yearmonth = b.month
AND a.model = b.model
LIMIT 20;
SELECT * FROM mdl_cmprsn order by yearmonth;

COPY mdl_cmprsn TO 'D:\Sumit\WORK\Eltsen\Data\SQL\mdl_cmprsnC.csv'
DELIMITER ',' CSV HEADER;



